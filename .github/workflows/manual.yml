# This is a basic workflow that is manually triggered

name: Manual build-workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:

env:
  BOOST_VER: 1.86.0

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential gettext git pkg-config 

      - uses: kenchan0130/actions-system-info@master
        id: system-info

      - name: Restore Boost from Cache
        id: restore-cache-Boost
        uses: actions/cache/restore@v4
        with:
          path: ~/boost-${{env.BOOST_VER}}
          key: ${{ runner.os }}-${{ steps.system-info.outputs.name }}-${{ steps.system-info.outputs.release }}-Boost-${{ env.BOOST_VER }}

      - name: Build Boost
        if: steps.restore-cache-Boost.outputs.cache-hit != 'true'
        run: |
          cd ~
          wget https://github.com/boostorg/boost/releases/download/boost-${{env.BOOST_VER}}/boost-${{env.BOOST_VER}}-cmake.tar.xz
          tar -xJf boost-${{env.BOOST_VER}}-cmake.tar.xz
          cd boost-${{env.BOOST_VER}}
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DBOOST_RUNTIME_LINK=static -DBUILD_SHARED_LIBS=OFF
          cmake --build build

      - name: Save Boost to Cache
        if: steps.restore-cache-Boost.outputs.cache-hit != 'true'
        id: save-cache-Boost
        uses: actions/cache/save@v4
        with:
          path: ~/boost-${{env.BOOST_VER}}
          key: ${{ runner.os }}-${{ steps.system-info.outputs.name }}-${{ steps.system-info.outputs.release }}-Boost-${{ env.BOOST_VER }}

      - name: Install Boost
        run: |
          cd ~/boost-${{env.BOOST_VER}}
          sudo cmake --build build --target install
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build project
        id: build-project
        run: |
          cd $GITHUB_WORKSPACE
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release 
          cmake --build build 

      - name: Upload artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dompdfcli_linux_x86_64
          path: build/dompdfcli
          compression-level: 0


  build-windows:
    runs-on: windows-latest
    steps:
      - uses: kenchan0130/actions-system-info@master
        id: system-info

      - name: Install MinGW
        run: |
         rm -r -Force C:\mingw64
         cd C:\
         iwr -outf mingw.zip https://github.com/brechtsanders/winlibs_mingw/releases/download/15.2.0posix-13.0.0-msvcrt-r1/winlibs-x86_64-posix-seh-gcc-15.2.0-mingw-w64msvcrt-13.0.0-r1.zip
         unzip -o mingw.zip

      - name: Restore Boost from Cache
        id: restore-cache-Boost
        uses: actions/cache/restore@v4
        with:
          path: C:\boost-${{env.BOOST_VER}}
          key: ${{ runner.os }}-${{ steps.system-info.outputs.name }}-${{ steps.system-info.outputs.release }}-Boost-${{ env.BOOST_VER }}

      - name: Build Boost
        if: steps.restore-cache-Boost.outputs.cache-hit != 'true'
        run: |
          cd C:
          iwr -outf boost-${{env.BOOST_VER}}.zip https://github.com/boostorg/boost/releases/download/boost-${{env.BOOST_VER}}/boost-${{env.BOOST_VER}}-cmake.zip
          unzip boost-${{env.BOOST_VER}}.zip
          cd boost-${{env.BOOST_VER}}
          cmake -G "MinGW Makefiles" -S . -B build -DCMAKE_BUILD_TYPE=Release -DBOOST_RUNTIME_LINK=static -DBUILD_SHARED_LIBS=OFF -DBOOST_INCLUDE_LIBRARIES="program_options;nowide;process;predef;tokenizer"
          cmake --build build

      - name: Save Boost to Cache
        if: steps.restore-cache-Boost.outputs.cache-hit != 'true'
        id: save-cache-Boost
        uses: actions/cache/save@v4
        with:
          path: C:\boost-${{env.BOOST_VER}}
          key: ${{ runner.os }}-${{ steps.system-info.outputs.name }}-${{ steps.system-info.outputs.release }}-Boost-${{ env.BOOST_VER }}

      - name: Install Boost
        run: |
          cd C:\boost-${{env.BOOST_VER}}
          cmake --build build --target install

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build project
        id: build-project
        run: |
          cmake -G "MinGW Makefiles" -S . -B build -DCMAKE_BUILD_TYPE=Release -DBoost_DIR="C:/Boost/lib/cmake/Boost-${{ env.BOOST_VER }}" -DCMAKE_TLS_VERIFY=OFF
          cmake --build build 

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: dompdfcli_windows_x86_64
          path: build\dompdfcli.exe
          compression-level: 0

